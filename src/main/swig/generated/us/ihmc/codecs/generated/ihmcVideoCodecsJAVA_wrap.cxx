/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (https://www.swig.org).
 * Version 4.1.1
 *
 * Do not make changes to this file unless you know what you are doing - modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */


#define SWIG_VERSION 0x040101
#define SWIGJAVA

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__))
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__))
# else
#   define SWIGUNUSED
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if defined(__GNUC__)
#  if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#    ifndef GCC_HASCLASSVISIBILITY
#      define GCC_HASCLASSVISIBILITY
#    endif
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif

/* Deal with Apple's deprecated 'AssertMacros.h' from Carbon-framework */
#if defined(__APPLE__) && !defined(__ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES)
# define __ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES 0
#endif

/* Intel's compiler complains if a variable which was never initialised is
 * cast to void, which is a common idiom which we use to indicate that we
 * are aware a variable isn't used.  So we just silence that warning.
 * See: https://github.com/swig/swig/issues/192 for more discussion.
 */
#ifdef __INTEL_COMPILER
# pragma warning disable 592
#endif


#include <jni.h>
#include <stdlib.h>
#include <string.h>


/* Support for throwing Java exceptions */
typedef enum {
  SWIG_JavaOutOfMemoryError = 1,
  SWIG_JavaIOException,
  SWIG_JavaRuntimeException,
  SWIG_JavaIndexOutOfBoundsException,
  SWIG_JavaArithmeticException,
  SWIG_JavaIllegalArgumentException,
  SWIG_JavaNullPointerException,
  SWIG_JavaDirectorPureVirtual,
  SWIG_JavaUnknownError,
  SWIG_JavaIllegalStateException,
} SWIG_JavaExceptionCodes;

typedef struct {
  SWIG_JavaExceptionCodes code;
  const char *java_exception;
} SWIG_JavaExceptions_t;


static void SWIGUNUSED SWIG_JavaThrowException(JNIEnv *jenv, SWIG_JavaExceptionCodes code, const char *msg) {
  jclass excep;
  static const SWIG_JavaExceptions_t java_exceptions[] = {
    { SWIG_JavaOutOfMemoryError, "java/lang/OutOfMemoryError" },
    { SWIG_JavaIOException, "java/io/IOException" },
    { SWIG_JavaRuntimeException, "java/lang/RuntimeException" },
    { SWIG_JavaIndexOutOfBoundsException, "java/lang/IndexOutOfBoundsException" },
    { SWIG_JavaArithmeticException, "java/lang/ArithmeticException" },
    { SWIG_JavaIllegalArgumentException, "java/lang/IllegalArgumentException" },
    { SWIG_JavaNullPointerException, "java/lang/NullPointerException" },
    { SWIG_JavaDirectorPureVirtual, "java/lang/RuntimeException" },
    { SWIG_JavaUnknownError,  "java/lang/UnknownError" },
    { SWIG_JavaIllegalStateException, "java/lang/IllegalStateException" },
    { (SWIG_JavaExceptionCodes)0,  "java/lang/UnknownError" }
  };
  const SWIG_JavaExceptions_t *except_ptr = java_exceptions;

  while (except_ptr->code != code && except_ptr->code)
    except_ptr++;

  jenv->ExceptionClear();
  excep = jenv->FindClass(except_ptr->java_exception);
  if (excep)
    jenv->ThrowNew(excep, msg);
}


/* Contract support */

#define SWIG_contract_assert(nullreturn, expr, msg) do { if (!(expr)) {SWIG_JavaThrowException(jenv, SWIG_JavaIllegalArgumentException, msg); return nullreturn; } } while (0)


#ifdef __cplusplus
#include <utility>
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigSmartPointer {
    T *ptr;
    SwigSmartPointer(T *p) : ptr(p) { }
    ~SwigSmartPointer() { delete ptr; }
    SwigSmartPointer& operator=(SwigSmartPointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
    void reset(T *p) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = p; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigSmartPointer tmp(new T(t)); pointer = tmp; return *this; }
#if __cplusplus >=201103L
  SwigValueWrapper& operator=(T&& t) { SwigSmartPointer tmp(new T(std::move(t))); pointer = tmp; return *this; }
  operator T&&() const { return std::move(*pointer.ptr); }
#else
  operator T&() const { return *pointer.ptr; }
#endif
  T *operator&() const { return pointer.ptr; }
  static void reset(SwigValueWrapper& t, T *p) { t.pointer.reset(p); }
};

/*
 * SwigValueInit() is a generic initialisation solution as the following approach:
 * 
 *       T c_result = T();
 * 
 * doesn't compile for all types for example:
 * 
 *       unsigned int c_result = unsigned int();
 */
template <typename T> T SwigValueInit() {
  return T();
}

#if __cplusplus >=201103L
# define SWIG_STD_MOVE(OBJ) std::move(OBJ)
#else
# define SWIG_STD_MOVE(OBJ) OBJ
#endif

#endif


#if defined(SWIG_NOINCLUDE) || defined(SWIG_NOARRAYS)


static int SWIG_JavaArrayInBool (JNIEnv *jenv, jboolean **jarr, bool **carr, jbooleanArray input);
static void SWIG_JavaArrayArgoutBool (JNIEnv *jenv, jboolean *jarr, bool *carr, jbooleanArray input);
static jbooleanArray SWIG_JavaArrayOutBool (JNIEnv *jenv, bool *result, jsize sz);


static int SWIG_JavaArrayInSchar (JNIEnv *jenv, jbyte **jarr, signed char **carr, jbyteArray input);
static void SWIG_JavaArrayArgoutSchar (JNIEnv *jenv, jbyte *jarr, signed char *carr, jbyteArray input);
static jbyteArray SWIG_JavaArrayOutSchar (JNIEnv *jenv, signed char *result, jsize sz);


static int SWIG_JavaArrayInUchar (JNIEnv *jenv, jshort **jarr, unsigned char **carr, jshortArray input);
static void SWIG_JavaArrayArgoutUchar (JNIEnv *jenv, jshort *jarr, unsigned char *carr, jshortArray input);
static jshortArray SWIG_JavaArrayOutUchar (JNIEnv *jenv, unsigned char *result, jsize sz);


static int SWIG_JavaArrayInShort (JNIEnv *jenv, jshort **jarr, short **carr, jshortArray input);
static void SWIG_JavaArrayArgoutShort (JNIEnv *jenv, jshort *jarr, short *carr, jshortArray input);
static jshortArray SWIG_JavaArrayOutShort (JNIEnv *jenv, short *result, jsize sz);


static int SWIG_JavaArrayInUshort (JNIEnv *jenv, jint **jarr, unsigned short **carr, jintArray input);
static void SWIG_JavaArrayArgoutUshort (JNIEnv *jenv, jint *jarr, unsigned short *carr, jintArray input);
static jintArray SWIG_JavaArrayOutUshort (JNIEnv *jenv, unsigned short *result, jsize sz);


static int SWIG_JavaArrayInInt (JNIEnv *jenv, jint **jarr, int **carr, jintArray input);
static void SWIG_JavaArrayArgoutInt (JNIEnv *jenv, jint *jarr, int *carr, jintArray input);
static jintArray SWIG_JavaArrayOutInt (JNIEnv *jenv, int *result, jsize sz);


static int SWIG_JavaArrayInUint (JNIEnv *jenv, jlong **jarr, unsigned int **carr, jlongArray input);
static void SWIG_JavaArrayArgoutUint (JNIEnv *jenv, jlong *jarr, unsigned int *carr, jlongArray input);
static jlongArray SWIG_JavaArrayOutUint (JNIEnv *jenv, unsigned int *result, jsize sz);


static int SWIG_JavaArrayInLong (JNIEnv *jenv, jint **jarr, long **carr, jintArray input);
static void SWIG_JavaArrayArgoutLong (JNIEnv *jenv, jint *jarr, long *carr, jintArray input);
static jintArray SWIG_JavaArrayOutLong (JNIEnv *jenv, long *result, jsize sz);


static int SWIG_JavaArrayInUlong (JNIEnv *jenv, jlong **jarr, unsigned long **carr, jlongArray input);
static void SWIG_JavaArrayArgoutUlong (JNIEnv *jenv, jlong *jarr, unsigned long *carr, jlongArray input);
static jlongArray SWIG_JavaArrayOutUlong (JNIEnv *jenv, unsigned long *result, jsize sz);


static int SWIG_JavaArrayInLonglong (JNIEnv *jenv, jlong **jarr, long long **carr, jlongArray input);
static void SWIG_JavaArrayArgoutLonglong (JNIEnv *jenv, jlong *jarr, long long *carr, jlongArray input);
static jlongArray SWIG_JavaArrayOutLonglong (JNIEnv *jenv, long long *result, jsize sz);


static int SWIG_JavaArrayInFloat (JNIEnv *jenv, jfloat **jarr, float **carr, jfloatArray input);
static void SWIG_JavaArrayArgoutFloat (JNIEnv *jenv, jfloat *jarr, float *carr, jfloatArray input);
static jfloatArray SWIG_JavaArrayOutFloat (JNIEnv *jenv, float *result, jsize sz);


static int SWIG_JavaArrayInDouble (JNIEnv *jenv, jdouble **jarr, double **carr, jdoubleArray input);
static void SWIG_JavaArrayArgoutDouble (JNIEnv *jenv, jdouble *jarr, double *carr, jdoubleArray input);
static jdoubleArray SWIG_JavaArrayOutDouble (JNIEnv *jenv, double *result, jsize sz);


#else


/* bool[] support */
static int SWIG_JavaArrayInBool (JNIEnv *jenv, jboolean **jarr, bool **carr, jbooleanArray input) {
  int i;
  jsize sz;
  if (!input) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
    return 0;
  }
  sz = jenv->GetArrayLength(input);
  *jarr = jenv->GetBooleanArrayElements(input, 0);
  if (!*jarr)
    return 0; 
  *carr = new bool[sz]; 
  if (!*carr) {
    SWIG_JavaThrowException(jenv, SWIG_JavaOutOfMemoryError, "array memory allocation failed");
    return 0;
  }
  for (i=0; i<sz; i++)
    (*carr)[i] = ((*jarr)[i] != 0);
  return 1;
}

static void SWIG_JavaArrayArgoutBool (JNIEnv *jenv, jboolean *jarr, bool *carr, jbooleanArray input) {
  int i;
  jsize sz = jenv->GetArrayLength(input);
  for (i=0; i<sz; i++)
    jarr[i] = (jboolean)carr[i];
  jenv->ReleaseBooleanArrayElements(input, jarr, 0);
}

static jbooleanArray SWIG_JavaArrayOutBool (JNIEnv *jenv, bool *result, jsize sz) {
  jboolean *arr;
  int i;
  jbooleanArray jresult = jenv->NewBooleanArray(sz);
  if (!jresult)
    return NULL;
  arr = jenv->GetBooleanArrayElements(jresult, 0);
  if (!arr)
    return NULL;
  for (i=0; i<sz; i++)
    arr[i] = (jboolean)result[i];
  jenv->ReleaseBooleanArrayElements(jresult, arr, 0);
  return jresult;
}


/* signed char[] support */
static int SWIG_JavaArrayInSchar (JNIEnv *jenv, jbyte **jarr, signed char **carr, jbyteArray input) {
  int i;
  jsize sz;
  if (!input) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
    return 0;
  }
  sz = jenv->GetArrayLength(input);
  *jarr = jenv->GetByteArrayElements(input, 0);
  if (!*jarr)
    return 0; 
  *carr = new signed char[sz]; 
  if (!*carr) {
    SWIG_JavaThrowException(jenv, SWIG_JavaOutOfMemoryError, "array memory allocation failed");
    return 0;
  }
  for (i=0; i<sz; i++)
    (*carr)[i] = (signed char)(*jarr)[i];
  return 1;
}

static void SWIG_JavaArrayArgoutSchar (JNIEnv *jenv, jbyte *jarr, signed char *carr, jbyteArray input) {
  int i;
  jsize sz = jenv->GetArrayLength(input);
  for (i=0; i<sz; i++)
    jarr[i] = (jbyte)carr[i];
  jenv->ReleaseByteArrayElements(input, jarr, 0);
}

static jbyteArray SWIG_JavaArrayOutSchar (JNIEnv *jenv, signed char *result, jsize sz) {
  jbyte *arr;
  int i;
  jbyteArray jresult = jenv->NewByteArray(sz);
  if (!jresult)
    return NULL;
  arr = jenv->GetByteArrayElements(jresult, 0);
  if (!arr)
    return NULL;
  for (i=0; i<sz; i++)
    arr[i] = (jbyte)result[i];
  jenv->ReleaseByteArrayElements(jresult, arr, 0);
  return jresult;
}


/* unsigned char[] support */
static int SWIG_JavaArrayInUchar (JNIEnv *jenv, jshort **jarr, unsigned char **carr, jshortArray input) {
  int i;
  jsize sz;
  if (!input) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
    return 0;
  }
  sz = jenv->GetArrayLength(input);
  *jarr = jenv->GetShortArrayElements(input, 0);
  if (!*jarr)
    return 0; 
  *carr = new unsigned char[sz]; 
  if (!*carr) {
    SWIG_JavaThrowException(jenv, SWIG_JavaOutOfMemoryError, "array memory allocation failed");
    return 0;
  }
  for (i=0; i<sz; i++)
    (*carr)[i] = (unsigned char)(*jarr)[i];
  return 1;
}

static void SWIG_JavaArrayArgoutUchar (JNIEnv *jenv, jshort *jarr, unsigned char *carr, jshortArray input) {
  int i;
  jsize sz = jenv->GetArrayLength(input);
  for (i=0; i<sz; i++)
    jarr[i] = (jshort)carr[i];
  jenv->ReleaseShortArrayElements(input, jarr, 0);
}

static jshortArray SWIG_JavaArrayOutUchar (JNIEnv *jenv, unsigned char *result, jsize sz) {
  jshort *arr;
  int i;
  jshortArray jresult = jenv->NewShortArray(sz);
  if (!jresult)
    return NULL;
  arr = jenv->GetShortArrayElements(jresult, 0);
  if (!arr)
    return NULL;
  for (i=0; i<sz; i++)
    arr[i] = (jshort)result[i];
  jenv->ReleaseShortArrayElements(jresult, arr, 0);
  return jresult;
}


/* short[] support */
static int SWIG_JavaArrayInShort (JNIEnv *jenv, jshort **jarr, short **carr, jshortArray input) {
  int i;
  jsize sz;
  if (!input) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
    return 0;
  }
  sz = jenv->GetArrayLength(input);
  *jarr = jenv->GetShortArrayElements(input, 0);
  if (!*jarr)
    return 0; 
  *carr = new short[sz]; 
  if (!*carr) {
    SWIG_JavaThrowException(jenv, SWIG_JavaOutOfMemoryError, "array memory allocation failed");
    return 0;
  }
  for (i=0; i<sz; i++)
    (*carr)[i] = (short)(*jarr)[i];
  return 1;
}

static void SWIG_JavaArrayArgoutShort (JNIEnv *jenv, jshort *jarr, short *carr, jshortArray input) {
  int i;
  jsize sz = jenv->GetArrayLength(input);
  for (i=0; i<sz; i++)
    jarr[i] = (jshort)carr[i];
  jenv->ReleaseShortArrayElements(input, jarr, 0);
}

static jshortArray SWIG_JavaArrayOutShort (JNIEnv *jenv, short *result, jsize sz) {
  jshort *arr;
  int i;
  jshortArray jresult = jenv->NewShortArray(sz);
  if (!jresult)
    return NULL;
  arr = jenv->GetShortArrayElements(jresult, 0);
  if (!arr)
    return NULL;
  for (i=0; i<sz; i++)
    arr[i] = (jshort)result[i];
  jenv->ReleaseShortArrayElements(jresult, arr, 0);
  return jresult;
}


/* unsigned short[] support */
static int SWIG_JavaArrayInUshort (JNIEnv *jenv, jint **jarr, unsigned short **carr, jintArray input) {
  int i;
  jsize sz;
  if (!input) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
    return 0;
  }
  sz = jenv->GetArrayLength(input);
  *jarr = jenv->GetIntArrayElements(input, 0);
  if (!*jarr)
    return 0; 
  *carr = new unsigned short[sz]; 
  if (!*carr) {
    SWIG_JavaThrowException(jenv, SWIG_JavaOutOfMemoryError, "array memory allocation failed");
    return 0;
  }
  for (i=0; i<sz; i++)
    (*carr)[i] = (unsigned short)(*jarr)[i];
  return 1;
}

static void SWIG_JavaArrayArgoutUshort (JNIEnv *jenv, jint *jarr, unsigned short *carr, jintArray input) {
  int i;
  jsize sz = jenv->GetArrayLength(input);
  for (i=0; i<sz; i++)
    jarr[i] = (jint)carr[i];
  jenv->ReleaseIntArrayElements(input, jarr, 0);
}

static jintArray SWIG_JavaArrayOutUshort (JNIEnv *jenv, unsigned short *result, jsize sz) {
  jint *arr;
  int i;
  jintArray jresult = jenv->NewIntArray(sz);
  if (!jresult)
    return NULL;
  arr = jenv->GetIntArrayElements(jresult, 0);
  if (!arr)
    return NULL;
  for (i=0; i<sz; i++)
    arr[i] = (jint)result[i];
  jenv->ReleaseIntArrayElements(jresult, arr, 0);
  return jresult;
}


/* int[] support */
static int SWIG_JavaArrayInInt (JNIEnv *jenv, jint **jarr, int **carr, jintArray input) {
  int i;
  jsize sz;
  if (!input) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
    return 0;
  }
  sz = jenv->GetArrayLength(input);
  *jarr = jenv->GetIntArrayElements(input, 0);
  if (!*jarr)
    return 0; 
  *carr = new int[sz]; 
  if (!*carr) {
    SWIG_JavaThrowException(jenv, SWIG_JavaOutOfMemoryError, "array memory allocation failed");
    return 0;
  }
  for (i=0; i<sz; i++)
    (*carr)[i] = (int)(*jarr)[i];
  return 1;
}

static void SWIG_JavaArrayArgoutInt (JNIEnv *jenv, jint *jarr, int *carr, jintArray input) {
  int i;
  jsize sz = jenv->GetArrayLength(input);
  for (i=0; i<sz; i++)
    jarr[i] = (jint)carr[i];
  jenv->ReleaseIntArrayElements(input, jarr, 0);
}

static jintArray SWIG_JavaArrayOutInt (JNIEnv *jenv, int *result, jsize sz) {
  jint *arr;
  int i;
  jintArray jresult = jenv->NewIntArray(sz);
  if (!jresult)
    return NULL;
  arr = jenv->GetIntArrayElements(jresult, 0);
  if (!arr)
    return NULL;
  for (i=0; i<sz; i++)
    arr[i] = (jint)result[i];
  jenv->ReleaseIntArrayElements(jresult, arr, 0);
  return jresult;
}


/* unsigned int[] support */
static int SWIG_JavaArrayInUint (JNIEnv *jenv, jlong **jarr, unsigned int **carr, jlongArray input) {
  int i;
  jsize sz;
  if (!input) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
    return 0;
  }
  sz = jenv->GetArrayLength(input);
  *jarr = jenv->GetLongArrayElements(input, 0);
  if (!*jarr)
    return 0; 
  *carr = new unsigned int[sz]; 
  if (!*carr) {
    SWIG_JavaThrowException(jenv, SWIG_JavaOutOfMemoryError, "array memory allocation failed");
    return 0;
  }
  for (i=0; i<sz; i++)
    (*carr)[i] = (unsigned int)(*jarr)[i];
  return 1;
}

static void SWIG_JavaArrayArgoutUint (JNIEnv *jenv, jlong *jarr, unsigned int *carr, jlongArray input) {
  int i;
  jsize sz = jenv->GetArrayLength(input);
  for (i=0; i<sz; i++)
    jarr[i] = (jlong)carr[i];
  jenv->ReleaseLongArrayElements(input, jarr, 0);
}

static jlongArray SWIG_JavaArrayOutUint (JNIEnv *jenv, unsigned int *result, jsize sz) {
  jlong *arr;
  int i;
  jlongArray jresult = jenv->NewLongArray(sz);
  if (!jresult)
    return NULL;
  arr = jenv->GetLongArrayElements(jresult, 0);
  if (!arr)
    return NULL;
  for (i=0; i<sz; i++)
    arr[i] = (jlong)result[i];
  jenv->ReleaseLongArrayElements(jresult, arr, 0);
  return jresult;
}


/* long[] support */
static int SWIG_JavaArrayInLong (JNIEnv *jenv, jint **jarr, long **carr, jintArray input) {
  int i;
  jsize sz;
  if (!input) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
    return 0;
  }
  sz = jenv->GetArrayLength(input);
  *jarr = jenv->GetIntArrayElements(input, 0);
  if (!*jarr)
    return 0; 
  *carr = new long[sz]; 
  if (!*carr) {
    SWIG_JavaThrowException(jenv, SWIG_JavaOutOfMemoryError, "array memory allocation failed");
    return 0;
  }
  for (i=0; i<sz; i++)
    (*carr)[i] = (long)(*jarr)[i];
  return 1;
}

static void SWIG_JavaArrayArgoutLong (JNIEnv *jenv, jint *jarr, long *carr, jintArray input) {
  int i;
  jsize sz = jenv->GetArrayLength(input);
  for (i=0; i<sz; i++)
    jarr[i] = (jint)carr[i];
  jenv->ReleaseIntArrayElements(input, jarr, 0);
}

static jintArray SWIG_JavaArrayOutLong (JNIEnv *jenv, long *result, jsize sz) {
  jint *arr;
  int i;
  jintArray jresult = jenv->NewIntArray(sz);
  if (!jresult)
    return NULL;
  arr = jenv->GetIntArrayElements(jresult, 0);
  if (!arr)
    return NULL;
  for (i=0; i<sz; i++)
    arr[i] = (jint)result[i];
  jenv->ReleaseIntArrayElements(jresult, arr, 0);
  return jresult;
}


/* unsigned long[] support */
static int SWIG_JavaArrayInUlong (JNIEnv *jenv, jlong **jarr, unsigned long **carr, jlongArray input) {
  int i;
  jsize sz;
  if (!input) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
    return 0;
  }
  sz = jenv->GetArrayLength(input);
  *jarr = jenv->GetLongArrayElements(input, 0);
  if (!*jarr)
    return 0; 
  *carr = new unsigned long[sz]; 
  if (!*carr) {
    SWIG_JavaThrowException(jenv, SWIG_JavaOutOfMemoryError, "array memory allocation failed");
    return 0;
  }
  for (i=0; i<sz; i++)
    (*carr)[i] = (unsigned long)(*jarr)[i];
  return 1;
}

static void SWIG_JavaArrayArgoutUlong (JNIEnv *jenv, jlong *jarr, unsigned long *carr, jlongArray input) {
  int i;
  jsize sz = jenv->GetArrayLength(input);
  for (i=0; i<sz; i++)
    jarr[i] = (jlong)carr[i];
  jenv->ReleaseLongArrayElements(input, jarr, 0);
}

static jlongArray SWIG_JavaArrayOutUlong (JNIEnv *jenv, unsigned long *result, jsize sz) {
  jlong *arr;
  int i;
  jlongArray jresult = jenv->NewLongArray(sz);
  if (!jresult)
    return NULL;
  arr = jenv->GetLongArrayElements(jresult, 0);
  if (!arr)
    return NULL;
  for (i=0; i<sz; i++)
    arr[i] = (jlong)result[i];
  jenv->ReleaseLongArrayElements(jresult, arr, 0);
  return jresult;
}


/* long long[] support */
static int SWIG_JavaArrayInLonglong (JNIEnv *jenv, jlong **jarr, long long **carr, jlongArray input) {
  int i;
  jsize sz;
  if (!input) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
    return 0;
  }
  sz = jenv->GetArrayLength(input);
  *jarr = jenv->GetLongArrayElements(input, 0);
  if (!*jarr)
    return 0; 
  *carr = new long long[sz]; 
  if (!*carr) {
    SWIG_JavaThrowException(jenv, SWIG_JavaOutOfMemoryError, "array memory allocation failed");
    return 0;
  }
  for (i=0; i<sz; i++)
    (*carr)[i] = (long long)(*jarr)[i];
  return 1;
}

static void SWIG_JavaArrayArgoutLonglong (JNIEnv *jenv, jlong *jarr, long long *carr, jlongArray input) {
  int i;
  jsize sz = jenv->GetArrayLength(input);
  for (i=0; i<sz; i++)
    jarr[i] = (jlong)carr[i];
  jenv->ReleaseLongArrayElements(input, jarr, 0);
}

static jlongArray SWIG_JavaArrayOutLonglong (JNIEnv *jenv, long long *result, jsize sz) {
  jlong *arr;
  int i;
  jlongArray jresult = jenv->NewLongArray(sz);
  if (!jresult)
    return NULL;
  arr = jenv->GetLongArrayElements(jresult, 0);
  if (!arr)
    return NULL;
  for (i=0; i<sz; i++)
    arr[i] = (jlong)result[i];
  jenv->ReleaseLongArrayElements(jresult, arr, 0);
  return jresult;
}


/* float[] support */
static int SWIG_JavaArrayInFloat (JNIEnv *jenv, jfloat **jarr, float **carr, jfloatArray input) {
  int i;
  jsize sz;
  if (!input) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
    return 0;
  }
  sz = jenv->GetArrayLength(input);
  *jarr = jenv->GetFloatArrayElements(input, 0);
  if (!*jarr)
    return 0; 
  *carr = new float[sz]; 
  if (!*carr) {
    SWIG_JavaThrowException(jenv, SWIG_JavaOutOfMemoryError, "array memory allocation failed");
    return 0;
  }
  for (i=0; i<sz; i++)
    (*carr)[i] = (float)(*jarr)[i];
  return 1;
}

static void SWIG_JavaArrayArgoutFloat (JNIEnv *jenv, jfloat *jarr, float *carr, jfloatArray input) {
  int i;
  jsize sz = jenv->GetArrayLength(input);
  for (i=0; i<sz; i++)
    jarr[i] = (jfloat)carr[i];
  jenv->ReleaseFloatArrayElements(input, jarr, 0);
}

static jfloatArray SWIG_JavaArrayOutFloat (JNIEnv *jenv, float *result, jsize sz) {
  jfloat *arr;
  int i;
  jfloatArray jresult = jenv->NewFloatArray(sz);
  if (!jresult)
    return NULL;
  arr = jenv->GetFloatArrayElements(jresult, 0);
  if (!arr)
    return NULL;
  for (i=0; i<sz; i++)
    arr[i] = (jfloat)result[i];
  jenv->ReleaseFloatArrayElements(jresult, arr, 0);
  return jresult;
}


/* double[] support */
static int SWIG_JavaArrayInDouble (JNIEnv *jenv, jdouble **jarr, double **carr, jdoubleArray input) {
  int i;
  jsize sz;
  if (!input) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
    return 0;
  }
  sz = jenv->GetArrayLength(input);
  *jarr = jenv->GetDoubleArrayElements(input, 0);
  if (!*jarr)
    return 0; 
  *carr = new double[sz]; 
  if (!*carr) {
    SWIG_JavaThrowException(jenv, SWIG_JavaOutOfMemoryError, "array memory allocation failed");
    return 0;
  }
  for (i=0; i<sz; i++)
    (*carr)[i] = (double)(*jarr)[i];
  return 1;
}

static void SWIG_JavaArrayArgoutDouble (JNIEnv *jenv, jdouble *jarr, double *carr, jdoubleArray input) {
  int i;
  jsize sz = jenv->GetArrayLength(input);
  for (i=0; i<sz; i++)
    jarr[i] = (jdouble)carr[i];
  jenv->ReleaseDoubleArrayElements(input, jarr, 0);
}

static jdoubleArray SWIG_JavaArrayOutDouble (JNIEnv *jenv, double *result, jsize sz) {
  jdouble *arr;
  int i;
  jdoubleArray jresult = jenv->NewDoubleArray(sz);
  if (!jresult)
    return NULL;
  arr = jenv->GetDoubleArrayElements(jresult, 0);
  if (!arr)
    return NULL;
  for (i=0; i<sz; i++)
    arr[i] = (jdouble)result[i];
  jenv->ReleaseDoubleArrayElements(jresult, arr, 0);
  return jresult;
}


#endif


#include "YUVPicture.h"
#include "RGBPicture.h"
#include "JPEGDecoderImpl.h"
#include "JPEGEncoderImpl.h"



	#include "OpenH264DecoderImpl.h"
	#include "OpenH264EncoderImpl.h"


#ifdef __cplusplus
extern "C" {
#endif

SWIGEXPORT jint JNICALL Java_us_ihmc_codecs_generated_ihmcVideoCodecsJNI_YUVPicture_1getSubsamplingType(JNIEnv *jenv, jclass jcls, jint jarg1, jint jarg2, jint jarg3, jint jarg4, jint jarg5, jint jarg6) {
  jint jresult = 0 ;
  int arg1 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  int arg6 ;
  YUVPicture::YUVSubsamplingType result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  arg6 = (int)jarg6; 
  result = (YUVPicture::YUVSubsamplingType)YUVPicture::getSubsamplingType(arg1,arg2,arg3,arg4,arg5,arg6);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_us_ihmc_codecs_generated_ihmcVideoCodecsJNI_new_1YUVPicture_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jint jarg1, jint jarg2, jint jarg3, jint jarg4, jint jarg5, jint jarg6, jobject jarg7, jobject jarg8, jobject jarg9) {
  jlong jresult = 0 ;
  YUVPicture::YUVSubsamplingType arg1 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  int arg6 ;
  uint8 *arg7 = (uint8 *) 0 ;
  uint8 *arg8 = (uint8 *) 0 ;
  uint8 *arg9 = (uint8 *) 0 ;
  YUVPicture *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (YUVPicture::YUVSubsamplingType)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  arg6 = (int)jarg6; 
  {
    arg7 = (unsigned char *) jenv->GetDirectBufferAddress(jarg7); 
    if (arg7 == NULL) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unable to get address of a java.nio.ByteBuffer direct byte buffer. Buffer must be a direct buffer and not a non-direct buffer.");  
    }  
  }
  {
    arg8 = (unsigned char *) jenv->GetDirectBufferAddress(jarg8); 
    if (arg8 == NULL) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unable to get address of a java.nio.ByteBuffer direct byte buffer. Buffer must be a direct buffer and not a non-direct buffer.");  
    }  
  }
  {
    arg9 = (unsigned char *) jenv->GetDirectBufferAddress(jarg9); 
    if (arg9 == NULL) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unable to get address of a java.nio.ByteBuffer direct byte buffer. Buffer must be a direct buffer and not a non-direct buffer.");  
    }  
  }
  result = (YUVPicture *)new YUVPicture(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9);
  *(YUVPicture **)&jresult = result; 
  
  
  
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_us_ihmc_codecs_generated_ihmcVideoCodecsJNI_new_1YUVPicture_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jint jarg1, jint jarg2, jint jarg3) {
  jlong jresult = 0 ;
  YUVPicture::YUVSubsamplingType arg1 ;
  int arg2 ;
  int arg3 ;
  YUVPicture *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (YUVPicture::YUVSubsamplingType)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  result = (YUVPicture *)new YUVPicture(arg1,arg2,arg3);
  *(YUVPicture **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_us_ihmc_codecs_generated_ihmcVideoCodecsJNI_YUVPicture_1scale(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3, jint jarg4) {
  YUVPicture *arg1 = (YUVPicture *) 0 ;
  int arg2 ;
  int arg3 ;
  libyuv::FilterModeEnum arg4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(YUVPicture **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (libyuv::FilterModeEnum)jarg4; 
  (arg1)->scale(arg2,arg3,arg4);
}


SWIGEXPORT jlong JNICALL Java_us_ihmc_codecs_generated_ihmcVideoCodecsJNI_YUVPicture_1toRGB(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  YUVPicture *arg1 = (YUVPicture *) 0 ;
  RGBPicture *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(YUVPicture **)&jarg1; 
  result = (RGBPicture *)(arg1)->toRGB();
  *(RGBPicture **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_us_ihmc_codecs_generated_ihmcVideoCodecsJNI_YUVPicture_1getType(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  YUVPicture *arg1 = (YUVPicture *) 0 ;
  YUVPicture::YUVSubsamplingType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(YUVPicture **)&jarg1; 
  result = (YUVPicture::YUVSubsamplingType)(arg1)->getType();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_us_ihmc_codecs_generated_ihmcVideoCodecsJNI_YUVPicture_1getWidth(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  YUVPicture *arg1 = (YUVPicture *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(YUVPicture **)&jarg1; 
  result = (int)(arg1)->getWidth();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_us_ihmc_codecs_generated_ihmcVideoCodecsJNI_YUVPicture_1getHeight(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  YUVPicture *arg1 = (YUVPicture *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(YUVPicture **)&jarg1; 
  result = (int)(arg1)->getHeight();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_us_ihmc_codecs_generated_ihmcVideoCodecsJNI_YUVPicture_1getYStride(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  YUVPicture *arg1 = (YUVPicture *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(YUVPicture **)&jarg1; 
  result = (int)(arg1)->getYStride();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_us_ihmc_codecs_generated_ihmcVideoCodecsJNI_YUVPicture_1getUStride(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  YUVPicture *arg1 = (YUVPicture *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(YUVPicture **)&jarg1; 
  result = (int)(arg1)->getUStride();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_us_ihmc_codecs_generated_ihmcVideoCodecsJNI_YUVPicture_1getVStride(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  YUVPicture *arg1 = (YUVPicture *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(YUVPicture **)&jarg1; 
  result = (int)(arg1)->getVStride();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_us_ihmc_codecs_generated_ihmcVideoCodecsJNI_YUVPicture_1toYUV420(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  YUVPicture *arg1 = (YUVPicture *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(YUVPicture **)&jarg1; 
  (arg1)->toYUV420();
}


SWIGEXPORT void JNICALL Java_us_ihmc_codecs_generated_ihmcVideoCodecsJNI_delete_1YUVPicture(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  YUVPicture *arg1 = (YUVPicture *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(YUVPicture **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_us_ihmc_codecs_generated_ihmcVideoCodecsJNI_new_1RGBPicture(JNIEnv *jenv, jclass jcls, jint jarg1, jint jarg2) {
  jlong jresult = 0 ;
  int arg1 ;
  int arg2 ;
  RGBPicture *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  arg2 = (int)jarg2; 
  result = (RGBPicture *)new RGBPicture(arg1,arg2);
  *(RGBPicture **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_us_ihmc_codecs_generated_ihmcVideoCodecsJNI_RGBPicture_1put(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jobject jarg2) {
  RGBPicture *arg1 = (RGBPicture *) 0 ;
  uint8 *arg2 = (uint8 *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RGBPicture **)&jarg1; 
  {
    arg2 = (unsigned char *) jenv->GetDirectBufferAddress(jarg2); 
    if (arg2 == NULL) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unable to get address of a java.nio.ByteBuffer direct byte buffer. Buffer must be a direct buffer and not a non-direct buffer.");  
    }  
  }
  (arg1)->put(arg2);
  
}


SWIGEXPORT void JNICALL Java_us_ihmc_codecs_generated_ihmcVideoCodecsJNI_RGBPicture_1putRGBA(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jobject jarg2) {
  RGBPicture *arg1 = (RGBPicture *) 0 ;
  uint8 *arg2 = (uint8 *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RGBPicture **)&jarg1; 
  {
    arg2 = (unsigned char *) jenv->GetDirectBufferAddress(jarg2); 
    if (arg2 == NULL) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unable to get address of a java.nio.ByteBuffer direct byte buffer. Buffer must be a direct buffer and not a non-direct buffer.");  
    }  
  }
  (arg1)->putRGBA(arg2);
  
}


SWIGEXPORT void JNICALL Java_us_ihmc_codecs_generated_ihmcVideoCodecsJNI_RGBPicture_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jobject jarg2) {
  RGBPicture *arg1 = (RGBPicture *) 0 ;
  uint8 *arg2 = (uint8 *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RGBPicture **)&jarg1; 
  {
    arg2 = (unsigned char *) jenv->GetDirectBufferAddress(jarg2); 
    if (arg2 == NULL) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unable to get address of a java.nio.ByteBuffer direct byte buffer. Buffer must be a direct buffer and not a non-direct buffer.");  
    }  
  }
  (arg1)->get(arg2);
  
}


SWIGEXPORT jint JNICALL Java_us_ihmc_codecs_generated_ihmcVideoCodecsJNI_RGBPicture_1getWidth(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  RGBPicture *arg1 = (RGBPicture *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RGBPicture **)&jarg1; 
  result = (int)(arg1)->getWidth();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_us_ihmc_codecs_generated_ihmcVideoCodecsJNI_RGBPicture_1getHeight(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  RGBPicture *arg1 = (RGBPicture *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RGBPicture **)&jarg1; 
  result = (int)(arg1)->getHeight();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_us_ihmc_codecs_generated_ihmcVideoCodecsJNI_RGBPicture_1toYUV(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  RGBPicture *arg1 = (RGBPicture *) 0 ;
  YUVPicture::YUVSubsamplingType arg2 ;
  YUVPicture *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RGBPicture **)&jarg1; 
  arg2 = (YUVPicture::YUVSubsamplingType)jarg2; 
  result = (YUVPicture *)(arg1)->toYUV(arg2);
  *(YUVPicture **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_us_ihmc_codecs_generated_ihmcVideoCodecsJNI_delete_1RGBPicture(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  RGBPicture *arg1 = (RGBPicture *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(RGBPicture **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_us_ihmc_codecs_generated_ihmcVideoCodecsJNI_JPEGDecoderImpl_1decode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jobject jarg2, jint jarg3) {
  jlong jresult = 0 ;
  JPEGDecoderImpl *arg1 = (JPEGDecoderImpl *) 0 ;
  uint8 *arg2 = (uint8 *) 0 ;
  int arg3 ;
  YUVPicture *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(JPEGDecoderImpl **)&jarg1; 
  {
    arg2 = (unsigned char *) jenv->GetDirectBufferAddress(jarg2); 
    if (arg2 == NULL) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unable to get address of a java.nio.ByteBuffer direct byte buffer. Buffer must be a direct buffer and not a non-direct buffer.");  
    }  
  }
  arg3 = (int)jarg3; 
  result = (YUVPicture *)(arg1)->decode(arg2,arg3);
  *(YUVPicture **)&jresult = result; 
  
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_us_ihmc_codecs_generated_ihmcVideoCodecsJNI_new_1JPEGDecoderImpl(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  JPEGDecoderImpl *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (JPEGDecoderImpl *)new JPEGDecoderImpl();
  *(JPEGDecoderImpl **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_us_ihmc_codecs_generated_ihmcVideoCodecsJNI_delete_1JPEGDecoderImpl(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  JPEGDecoderImpl *arg1 = (JPEGDecoderImpl *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(JPEGDecoderImpl **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_us_ihmc_codecs_generated_ihmcVideoCodecsJNI_mem_1destination_1mgr_1destinationManager_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  mem_destination_mgr *arg1 = (mem_destination_mgr *) 0 ;
  jpeg_destination_mgr arg2 ;
  jpeg_destination_mgr *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mem_destination_mgr **)&jarg1; 
  argp2 = *(jpeg_destination_mgr **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null jpeg_destination_mgr");
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->destinationManager = arg2;
}


SWIGEXPORT jlong JNICALL Java_us_ihmc_codecs_generated_ihmcVideoCodecsJNI_mem_1destination_1mgr_1destinationManager_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  mem_destination_mgr *arg1 = (mem_destination_mgr *) 0 ;
  jpeg_destination_mgr result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mem_destination_mgr **)&jarg1; 
  result =  ((arg1)->destinationManager);
  *(jpeg_destination_mgr **)&jresult = new jpeg_destination_mgr(result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_us_ihmc_codecs_generated_ihmcVideoCodecsJNI_mem_1destination_1mgr_1outputBuffer_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  mem_destination_mgr *arg1 = (mem_destination_mgr *) 0 ;
  unsigned char *arg2 = (unsigned char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mem_destination_mgr **)&jarg1; 
  arg2 = *(unsigned char **)&jarg2; 
  if (arg1) (arg1)->outputBuffer = arg2;
}


SWIGEXPORT jlong JNICALL Java_us_ihmc_codecs_generated_ihmcVideoCodecsJNI_mem_1destination_1mgr_1outputBuffer_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  mem_destination_mgr *arg1 = (mem_destination_mgr *) 0 ;
  unsigned char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mem_destination_mgr **)&jarg1; 
  result = (unsigned char *) ((arg1)->outputBuffer);
  *(unsigned char **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_us_ihmc_codecs_generated_ihmcVideoCodecsJNI_mem_1destination_1mgr_1bufferSize_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  mem_destination_mgr *arg1 = (mem_destination_mgr *) 0 ;
  size_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mem_destination_mgr **)&jarg1; 
  arg2 = (size_t)jarg2; 
  if (arg1) (arg1)->bufferSize = arg2;
}


SWIGEXPORT jlong JNICALL Java_us_ihmc_codecs_generated_ihmcVideoCodecsJNI_mem_1destination_1mgr_1bufferSize_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  mem_destination_mgr *arg1 = (mem_destination_mgr *) 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mem_destination_mgr **)&jarg1; 
  result =  ((arg1)->bufferSize);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_us_ihmc_codecs_generated_ihmcVideoCodecsJNI_mem_1destination_1mgr_1compressedSize_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  mem_destination_mgr *arg1 = (mem_destination_mgr *) 0 ;
  size_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mem_destination_mgr **)&jarg1; 
  arg2 = (size_t)jarg2; 
  if (arg1) (arg1)->compressedSize = arg2;
}


SWIGEXPORT jlong JNICALL Java_us_ihmc_codecs_generated_ihmcVideoCodecsJNI_mem_1destination_1mgr_1compressedSize_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  mem_destination_mgr *arg1 = (mem_destination_mgr *) 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mem_destination_mgr **)&jarg1; 
  result =  ((arg1)->compressedSize);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_us_ihmc_codecs_generated_ihmcVideoCodecsJNI_new_1mem_1destination_1mgr(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  mem_destination_mgr *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (mem_destination_mgr *)new mem_destination_mgr();
  *(mem_destination_mgr **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_us_ihmc_codecs_generated_ihmcVideoCodecsJNI_delete_1mem_1destination_1mgr(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  mem_destination_mgr *arg1 = (mem_destination_mgr *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(mem_destination_mgr **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_us_ihmc_codecs_generated_ihmcVideoCodecsJNI_new_1JPEGEncoderImpl(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  JPEGEncoderImpl *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (JPEGEncoderImpl *)new JPEGEncoderImpl();
  *(JPEGEncoderImpl **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_us_ihmc_codecs_generated_ihmcVideoCodecsJNI_JPEGEncoderImpl_1maxSize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  JPEGEncoderImpl *arg1 = (JPEGEncoderImpl *) 0 ;
  YUVPicture *arg2 = (YUVPicture *) 0 ;
  long long result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(JPEGEncoderImpl **)&jarg1; 
  arg2 = *(YUVPicture **)&jarg2; 
  result = (long long)(arg1)->maxSize(arg2);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_us_ihmc_codecs_generated_ihmcVideoCodecsJNI_JPEGEncoderImpl_1encode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jobject jarg3, jint jarg4, jint jarg5) {
  jint jresult = 0 ;
  JPEGEncoderImpl *arg1 = (JPEGEncoderImpl *) 0 ;
  YUVPicture *arg2 = (YUVPicture *) 0 ;
  uint8 *arg3 = (uint8 *) 0 ;
  int arg4 ;
  int arg5 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(JPEGEncoderImpl **)&jarg1; 
  arg2 = *(YUVPicture **)&jarg2; 
  {
    arg3 = (unsigned char *) jenv->GetDirectBufferAddress(jarg3); 
    if (arg3 == NULL) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unable to get address of a java.nio.ByteBuffer direct byte buffer. Buffer must be a direct buffer and not a non-direct buffer.");  
    }  
  }
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  result = (int)(arg1)->encode(arg2,arg3,arg4,arg5);
  jresult = (jint)result; 
  
  return jresult;
}


SWIGEXPORT void JNICALL Java_us_ihmc_codecs_generated_ihmcVideoCodecsJNI_delete_1JPEGEncoderImpl(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  JPEGEncoderImpl *arg1 = (JPEGEncoderImpl *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(JPEGEncoderImpl **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_us_ihmc_codecs_generated_ihmcVideoCodecsJNI_new_1OpenH264DecoderImpl(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  OpenH264DecoderImpl *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (OpenH264DecoderImpl *)new OpenH264DecoderImpl();
  *(OpenH264DecoderImpl **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_us_ihmc_codecs_generated_ihmcVideoCodecsJNI_OpenH264DecoderImpl_1decodeFrame(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jobject jarg2, jint jarg3) {
  jlong jresult = 0 ;
  OpenH264DecoderImpl *arg1 = (OpenH264DecoderImpl *) 0 ;
  uint8 *arg2 = (uint8 *) 0 ;
  int arg3 ;
  YUVPicture *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenH264DecoderImpl **)&jarg1; 
  {
    arg2 = (unsigned char *) jenv->GetDirectBufferAddress(jarg2); 
    if (arg2 == NULL) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unable to get address of a java.nio.ByteBuffer direct byte buffer. Buffer must be a direct buffer and not a non-direct buffer.");  
    }  
  }
  arg3 = (int)jarg3; 
  result = (YUVPicture *)(arg1)->decodeFrame(arg2,arg3);
  *(YUVPicture **)&jresult = result; 
  
  return jresult;
}


SWIGEXPORT void JNICALL Java_us_ihmc_codecs_generated_ihmcVideoCodecsJNI_OpenH264DecoderImpl_1skipFrame(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jobject jarg2, jint jarg3) {
  OpenH264DecoderImpl *arg1 = (OpenH264DecoderImpl *) 0 ;
  uint8 *arg2 = (uint8 *) 0 ;
  int arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenH264DecoderImpl **)&jarg1; 
  {
    arg2 = (unsigned char *) jenv->GetDirectBufferAddress(jarg2); 
    if (arg2 == NULL) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unable to get address of a java.nio.ByteBuffer direct byte buffer. Buffer must be a direct buffer and not a non-direct buffer.");  
    }  
  }
  arg3 = (int)jarg3; 
  (arg1)->skipFrame(arg2,arg3);
  
}


SWIGEXPORT void JNICALL Java_us_ihmc_codecs_generated_ihmcVideoCodecsJNI_delete_1OpenH264DecoderImpl(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenH264DecoderImpl *arg1 = (OpenH264DecoderImpl *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenH264DecoderImpl **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_us_ihmc_codecs_generated_ihmcVideoCodecsJNI_new_1OpenH264EncoderImpl(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  OpenH264EncoderImpl *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (OpenH264EncoderImpl *)new OpenH264EncoderImpl();
  *(OpenH264EncoderImpl **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_us_ihmc_codecs_generated_ihmcVideoCodecsJNI_OpenH264EncoderImpl_1setUsageType(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  OpenH264EncoderImpl *arg1 = (OpenH264EncoderImpl *) 0 ;
  EUsageType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenH264EncoderImpl **)&jarg1; 
  arg2 = (EUsageType)jarg2; 
  (arg1)->setUsageType(arg2);
}


SWIGEXPORT void JNICALL Java_us_ihmc_codecs_generated_ihmcVideoCodecsJNI_OpenH264EncoderImpl_1setSize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3) {
  OpenH264EncoderImpl *arg1 = (OpenH264EncoderImpl *) 0 ;
  int arg2 ;
  int arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenH264EncoderImpl **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  (arg1)->setSize(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_us_ihmc_codecs_generated_ihmcVideoCodecsJNI_OpenH264EncoderImpl_1setBitRate(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  OpenH264EncoderImpl *arg1 = (OpenH264EncoderImpl *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenH264EncoderImpl **)&jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->setBitRate(arg2);
}


SWIGEXPORT void JNICALL Java_us_ihmc_codecs_generated_ihmcVideoCodecsJNI_OpenH264EncoderImpl_1setRCMode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  OpenH264EncoderImpl *arg1 = (OpenH264EncoderImpl *) 0 ;
  RC_MODES arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenH264EncoderImpl **)&jarg1; 
  arg2 = (RC_MODES)jarg2; 
  (arg1)->setRCMode(arg2);
}


SWIGEXPORT void JNICALL Java_us_ihmc_codecs_generated_ihmcVideoCodecsJNI_OpenH264EncoderImpl_1setMaxFrameRate(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  OpenH264EncoderImpl *arg1 = (OpenH264EncoderImpl *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenH264EncoderImpl **)&jarg1; 
  arg2 = (float)jarg2; 
  (arg1)->setMaxFrameRate(arg2);
}


SWIGEXPORT void JNICALL Java_us_ihmc_codecs_generated_ihmcVideoCodecsJNI_OpenH264EncoderImpl_1setComplexityMode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  OpenH264EncoderImpl *arg1 = (OpenH264EncoderImpl *) 0 ;
  ECOMPLEXITY_MODE arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenH264EncoderImpl **)&jarg1; 
  arg2 = (ECOMPLEXITY_MODE)jarg2; 
  (arg1)->setComplexityMode(arg2);
}


SWIGEXPORT void JNICALL Java_us_ihmc_codecs_generated_ihmcVideoCodecsJNI_OpenH264EncoderImpl_1setIntraPeriod(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  OpenH264EncoderImpl *arg1 = (OpenH264EncoderImpl *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenH264EncoderImpl **)&jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->setIntraPeriod(arg2);
}


SWIGEXPORT void JNICALL Java_us_ihmc_codecs_generated_ihmcVideoCodecsJNI_OpenH264EncoderImpl_1setEnableSpsPpsIdAddition(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  OpenH264EncoderImpl *arg1 = (OpenH264EncoderImpl *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenH264EncoderImpl **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setEnableSpsPpsIdAddition(arg2);
}


SWIGEXPORT void JNICALL Java_us_ihmc_codecs_generated_ihmcVideoCodecsJNI_OpenH264EncoderImpl_1setEnableFrameSkip(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  OpenH264EncoderImpl *arg1 = (OpenH264EncoderImpl *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenH264EncoderImpl **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setEnableFrameSkip(arg2);
}


SWIGEXPORT void JNICALL Java_us_ihmc_codecs_generated_ihmcVideoCodecsJNI_OpenH264EncoderImpl_1setMaxBitrate(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  OpenH264EncoderImpl *arg1 = (OpenH264EncoderImpl *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenH264EncoderImpl **)&jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->setMaxBitrate(arg2);
}


SWIGEXPORT void JNICALL Java_us_ihmc_codecs_generated_ihmcVideoCodecsJNI_OpenH264EncoderImpl_1setMaxQp(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  OpenH264EncoderImpl *arg1 = (OpenH264EncoderImpl *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenH264EncoderImpl **)&jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->setMaxQp(arg2);
}


SWIGEXPORT void JNICALL Java_us_ihmc_codecs_generated_ihmcVideoCodecsJNI_OpenH264EncoderImpl_1setMinQp(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  OpenH264EncoderImpl *arg1 = (OpenH264EncoderImpl *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenH264EncoderImpl **)&jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->setMinQp(arg2);
}


SWIGEXPORT void JNICALL Java_us_ihmc_codecs_generated_ihmcVideoCodecsJNI_OpenH264EncoderImpl_1setEnableDenoise(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  OpenH264EncoderImpl *arg1 = (OpenH264EncoderImpl *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenH264EncoderImpl **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setEnableDenoise(arg2);
}


SWIGEXPORT jboolean JNICALL Java_us_ihmc_codecs_generated_ihmcVideoCodecsJNI_OpenH264EncoderImpl_1initialize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OpenH264EncoderImpl *arg1 = (OpenH264EncoderImpl *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenH264EncoderImpl **)&jarg1; 
  result = (bool)(arg1)->initialize();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_us_ihmc_codecs_generated_ihmcVideoCodecsJNI_OpenH264EncoderImpl_1encodeFrameImpl(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  OpenH264EncoderImpl *arg1 = (OpenH264EncoderImpl *) 0 ;
  YUVPicture *arg2 = (YUVPicture *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenH264EncoderImpl **)&jarg1; 
  arg2 = *(YUVPicture **)&jarg2; 
  result = (bool)(arg1)->encodeFrameImpl(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_us_ihmc_codecs_generated_ihmcVideoCodecsJNI_OpenH264EncoderImpl_1nextNAL(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OpenH264EncoderImpl *arg1 = (OpenH264EncoderImpl *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenH264EncoderImpl **)&jarg1; 
  result = (bool)(arg1)->nextNAL();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_us_ihmc_codecs_generated_ihmcVideoCodecsJNI_OpenH264EncoderImpl_1getNALSize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  OpenH264EncoderImpl *arg1 = (OpenH264EncoderImpl *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenH264EncoderImpl **)&jarg1; 
  result = (int)(arg1)->getNALSize();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_us_ihmc_codecs_generated_ihmcVideoCodecsJNI_OpenH264EncoderImpl_1getNAL(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jobject jarg2, jint jarg3) {
  OpenH264EncoderImpl *arg1 = (OpenH264EncoderImpl *) 0 ;
  uint8 *arg2 = (uint8 *) 0 ;
  int arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenH264EncoderImpl **)&jarg1; 
  {
    arg2 = (unsigned char *) jenv->GetDirectBufferAddress(jarg2); 
    if (arg2 == NULL) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unable to get address of a java.nio.ByteBuffer direct byte buffer. Buffer must be a direct buffer and not a non-direct buffer.");  
    }  
  }
  arg3 = (int)jarg3; 
  (arg1)->getNAL(arg2,arg3);
  
}


SWIGEXPORT void JNICALL Java_us_ihmc_codecs_generated_ihmcVideoCodecsJNI_OpenH264EncoderImpl_1sendIntraFrame(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OpenH264EncoderImpl *arg1 = (OpenH264EncoderImpl *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenH264EncoderImpl **)&jarg1; 
  (arg1)->sendIntraFrame();
}


SWIGEXPORT void JNICALL Java_us_ihmc_codecs_generated_ihmcVideoCodecsJNI_OpenH264EncoderImpl_1setLevelIDC(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  OpenH264EncoderImpl *arg1 = (OpenH264EncoderImpl *) 0 ;
  ELevelIdc arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenH264EncoderImpl **)&jarg1; 
  arg2 = (ELevelIdc)jarg2; 
  (arg1)->setLevelIDC(arg2);
}


SWIGEXPORT void JNICALL Java_us_ihmc_codecs_generated_ihmcVideoCodecsJNI_OpenH264EncoderImpl_1setProfileIdc(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  OpenH264EncoderImpl *arg1 = (OpenH264EncoderImpl *) 0 ;
  EProfileIdc arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenH264EncoderImpl **)&jarg1; 
  arg2 = (EProfileIdc)jarg2; 
  (arg1)->setProfileIdc(arg2);
}


SWIGEXPORT void JNICALL Java_us_ihmc_codecs_generated_ihmcVideoCodecsJNI_delete_1OpenH264EncoderImpl(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenH264EncoderImpl *arg1 = (OpenH264EncoderImpl *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenH264EncoderImpl **)&jarg1; 
  delete arg1;
}


#ifdef __cplusplus
}
#endif

